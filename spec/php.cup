/*
 * CUP specification file for PHP
 * 
 * Copyright (C) 2005 Nenad Jovanovic
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License. See the file
 * COPYRIGHT for more information.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */


/*

CAUTION:
When changing the name of the generated parser class, you have to change all
references to CUP$<parser name>$<stack|top>

*/

package phpanalysis.parser;

import java_cup.runtime.*;

parser code {: 

    // the name of the parsed file
    private String fileName;

    public void user_init() {
        // retrieve the name of the parsed file from the lexer
        this.fileName = ((Lexer) getScanner()).getFileName();
    }

    public String getFileName() {
        return this.fileName;
    }

    // override report_error from base class lr_parser
    public void report_error(String message, Object info) {
        System.err.println(message);
        if (info instanceof Symbol) {
            Symbol infoSym = (Symbol) info;
            if (infoSym.left != -1) {
                System.err.println("line: " + infoSym.left);
            } else {
                System.err.println("can't determine line number, symbol number is " + infoSym.sym);
		if (infoSym.sym == Symbols.EOF) {
                    System.err.println("= EOF symbol; check for things like unclosed string literals");
                }
            }
        }
    }

    // override report_error from base class lr_parser;
    // does the same as the original, but doesn't call report_error again
    public void report_fatal_error(String message, Object info)
    throws java.lang.Exception {
        // stop parsing (not really necessary since we throw an exception)
        done_parsing();

        // throw an exception
        throw new Exception("Can't recover from previous error(s)");
    }

:};

action code {:

:};


/*

Translation of Bison character tokens to named tokens
*******************************************************

,   T_COMMA
=   T_ASSIGN
?   T_QUESTION
:   T_COLON
|   T_BITWISE_OR
^   T_BITWISE_XOR
&   T_BITWISE_AND
<   T_IS_SMALLER
>   T_IS_GREATER
+   T_PLUS
-   T_MINUS
.   T_POINT
*   T_MULT
/   T_DIV
%   T_MODULO
!   T_NOT
~   T_BITWISE_NOT
@   T_AT
[   T_OPEN_RECT_BRACES

additional (not declared in Bison, implicit from Grammar):

{   T_OPEN_CURLY_BRACES
}   T_CLOSE_CURLY_BRACES
(   T_OPEN_BRACES
)   T_CLOSE_BRACES
;   T_SEMICOLON
$   T_DOLLAR
`   T_BACKTICK
"   T_DOUBLE_QUOTE
'   T_SINGLE_QUOTE
]   T_CLOSE_RECT_BRACES

add a terminal for epsilon (needed for parse tree construction)
T_EPSILON

*/

terminal ParseNode T_ABSTRACT;
terminal ParseNode T_AND_EQUAL;
terminal ParseNode T_ARRAY;
terminal ParseNode T_ARRAY_CAST;
terminal ParseNode T_AS;
terminal ParseNode T_ASSIGN;
terminal ParseNode T_AT;
terminal ParseNode T_BACKTICK;
terminal ParseNode T_BITWISE_AND;
terminal ParseNode T_BITWISE_NOT;
terminal ParseNode T_BITWISE_OR;
terminal ParseNode T_BITWISE_XOR;
terminal ParseNode T_BOOLEAN_AND;
terminal ParseNode T_BOOLEAN_OR;
terminal ParseNode T_BOOL_CAST;
terminal ParseNode T_BREAK;
terminal ParseNode T_CASE;
terminal ParseNode T_CATCH;
terminal ParseNode T_CLASS;
terminal ParseNode T_CLASS_C;
terminal ParseNode T_CLONE;
terminal ParseNode T_CLOSE_BRACES;
terminal ParseNode T_CLOSE_CURLY_BRACES;
terminal ParseNode T_CLOSE_RECT_BRACES;
terminal ParseNode T_COLON;
terminal ParseNode T_COMMA;
terminal ParseNode T_CONCAT_EQUAL;
terminal ParseNode T_CONST;
terminal ParseNode T_CONSTANT_ENCAPSED_STRING;
terminal ParseNode T_CONTINUE;
terminal ParseNode T_CURLY_OPEN;
terminal ParseNode T_DEC;
terminal ParseNode T_DECLARE;
terminal ParseNode T_DEFAULT;
terminal ParseNode T_DIR;
terminal ParseNode T_DIV;
terminal ParseNode T_DIV_EQUAL;
terminal ParseNode T_DNUMBER;
terminal ParseNode T_DO;
terminal ParseNode T_DOLLAR;
terminal ParseNode T_DOLLAR_OPEN_CURLY_BRACES;
terminal ParseNode T_DOUBLE_ARROW;
terminal ParseNode T_DOUBLE_CAST;
terminal ParseNode T_DOUBLE_QUOTE;
terminal ParseNode T_ECHO;
terminal ParseNode T_ELSE;
terminal ParseNode T_ELSEIF;
terminal ParseNode T_EMPTY;
terminal ParseNode T_ENCAPSED_AND_WHITESPACE;
terminal ParseNode T_ENDDECLARE;
terminal ParseNode T_ENDFOR;
terminal ParseNode T_ENDFOREACH;
terminal ParseNode T_ENDIF;
terminal ParseNode T_ENDSWITCH;
terminal ParseNode T_ENDWHILE;
terminal ParseNode T_END_HEREDOC;
terminal ParseNode T_EPSILON;
terminal ParseNode T_EVAL;
terminal ParseNode T_EXIT;
terminal ParseNode T_EXTENDS;
terminal ParseNode T_FILE;
terminal ParseNode T_FINAL;
terminal ParseNode T_FOR;
terminal ParseNode T_FOREACH;
terminal ParseNode T_FUNCTION;
terminal ParseNode T_FUNC_C;
terminal ParseNode T_GLOBAL;
terminal ParseNode T_GOTO;
terminal ParseNode T_HALT_COMPILER;
terminal ParseNode T_IF;
terminal ParseNode T_IMPLEMENTS;
terminal ParseNode T_INC;
terminal ParseNode T_INCLUDE;
terminal ParseNode T_INCLUDE_ONCE;
terminal ParseNode T_INLINE_HTML;
terminal ParseNode T_INSTANCEOF;
terminal ParseNode T_INTERFACE;
terminal ParseNode T_INT_CAST;
terminal ParseNode T_ISSET;
terminal ParseNode T_IS_EQUAL;
terminal ParseNode T_IS_GREATER;
terminal ParseNode T_IS_GREATER_OR_EQUAL;
terminal ParseNode T_IS_IDENTICAL;
terminal ParseNode T_IS_NOT_EQUAL;
terminal ParseNode T_IS_NOT_IDENTICAL;
terminal ParseNode T_IS_SMALLER;
terminal ParseNode T_IS_SMALLER_OR_EQUAL;
terminal ParseNode T_LINE;
terminal ParseNode T_LIST;
terminal ParseNode T_LNUMBER;
terminal ParseNode T_LOGICAL_AND;
terminal ParseNode T_LOGICAL_OR;
terminal ParseNode T_LOGICAL_XOR;
terminal ParseNode T_METHOD_C;
terminal ParseNode T_MINUS;
terminal ParseNode T_MINUS_EQUAL;
terminal ParseNode T_MODULO;
terminal ParseNode T_MOD_EQUAL;
terminal ParseNode T_MULT;
terminal ParseNode T_MUL_EQUAL;
terminal ParseNode T_NAMESPACE;
terminal ParseNode T_NEW;
terminal ParseNode T_NOT;
terminal ParseNode T_NS_C;
terminal ParseNode T_NS_SEPARATOR;
terminal ParseNode T_NUM_STRING;
terminal ParseNode T_OBJECT_CAST;
terminal ParseNode T_OBJECT_OPERATOR;
terminal ParseNode T_OPEN_BRACES;
terminal ParseNode T_OPEN_CURLY_BRACES;
terminal ParseNode T_OPEN_RECT_BRACES;
terminal ParseNode T_OR_EQUAL;
terminal ParseNode T_PAAMAYIM_NEKUDOTAYIM;
terminal ParseNode T_PLUS;
terminal ParseNode T_PLUS_EQUAL;
terminal ParseNode T_POINT;
terminal ParseNode T_PRINT;
terminal ParseNode T_PRIVATE;
terminal ParseNode T_PROTECTED;
terminal ParseNode T_PUBLIC;
terminal ParseNode T_QUESTION;
terminal ParseNode T_REQUIRE;
terminal ParseNode T_REQUIRE_ONCE;
terminal ParseNode T_RETURN;
terminal ParseNode T_SEMICOLON;
// terminal ParseNode T_SINGLE_QUOTE;
terminal ParseNode T_SL;
terminal ParseNode T_SL_EQUAL;
terminal ParseNode T_SR;
terminal ParseNode T_SR_EQUAL;
terminal ParseNode T_START_HEREDOC;
terminal ParseNode T_STATIC;
terminal ParseNode T_STRING;
terminal ParseNode T_STRING_CAST;
terminal ParseNode T_STRING_VARNAME;
terminal ParseNode T_SWITCH;
terminal ParseNode T_THROW;
terminal ParseNode T_TRY;
terminal ParseNode T_UNSET;
terminal ParseNode T_UNSET_CAST;
terminal ParseNode T_USE;
terminal ParseNode T_VAR;
terminal ParseNode T_VARIABLE;
terminal ParseNode T_WHILE;
terminal ParseNode T_XOR_EQUAL;

non terminal ParseNode S;
non terminal ParseNode additional_catch;
non terminal ParseNode additional_catches;
non terminal ParseNode array_pair_list;
non terminal ParseNode assignment_list;
non terminal ParseNode assignment_list_element;
non terminal ParseNode backticks_expr;
non terminal ParseNode base_variable;
non terminal ParseNode base_variable_with_function_calls;
non terminal ParseNode case_list;
non terminal ParseNode case_separator;
non terminal ParseNode class_constant;
non terminal ParseNode class_constant_declaration;
non terminal ParseNode class_declaration_statement;
non terminal ParseNode class_entry_type;
non terminal ParseNode class_name;
non terminal ParseNode class_name_reference;
non terminal ParseNode class_statement;
non terminal ParseNode class_statement_list;
non terminal ParseNode class_variable_declaration;
non terminal ParseNode common_scalar;
non terminal ParseNode compound_variable;
non terminal ParseNode constant_declaration;
non terminal ParseNode ctor_arguments;
non terminal ParseNode declare_list;
non terminal ParseNode declare_statement;
non terminal ParseNode dim_offset;
non terminal ParseNode dynamic_class_name_reference;
non terminal ParseNode dynamic_class_name_variable_properties;
non terminal ParseNode dynamic_class_name_variable_property;
non terminal ParseNode echo_expr_list;
non terminal ParseNode else_single;
non terminal ParseNode elseif_list;
non terminal ParseNode encaps_list;
non terminal ParseNode encaps_var;
non terminal ParseNode encaps_var_offset;
non terminal ParseNode exit_expr;
non terminal ParseNode expr;
non terminal ParseNode expr_without_variable;
non terminal ParseNode extends_from;
non terminal ParseNode for_expr;
non terminal ParseNode for_statement;
non terminal ParseNode foreach_optional_arg;
non terminal ParseNode foreach_statement;
non terminal ParseNode foreach_variable;
non terminal ParseNode fully_qualified_class_name;
non terminal ParseNode function;
non terminal ParseNode function_call;
non terminal ParseNode function_call_parameter_list;
non terminal ParseNode function_declaration_statement;
non terminal ParseNode global_var;
non terminal ParseNode global_var_list;
non terminal ParseNode implements_list;
non terminal ParseNode inner_statement;
non terminal ParseNode inner_statement_list;
non terminal ParseNode interface_entry;
non terminal ParseNode interface_extends_list;
non terminal ParseNode interface_list;
non terminal ParseNode internal_functions_in_yacc;
non terminal ParseNode is_reference;
non terminal ParseNode isset_variables;
non terminal ParseNode lexical_var_list;
non terminal ParseNode lexical_vars;
non terminal ParseNode member_modifier;
non terminal ParseNode method_body;
non terminal ParseNode method_modifiers;
non terminal ParseNode method_or_not;
non terminal ParseNode namespace_name;
non terminal ParseNode new_else_single;
non terminal ParseNode new_elseif_list;
non terminal ParseNode non_empty_additional_catches;
non terminal ParseNode non_empty_array_pair_list;
non terminal ParseNode non_empty_for_expr;
non terminal ParseNode non_empty_function_call_parameter_list;
non terminal ParseNode non_empty_member_modifiers;
non terminal ParseNode non_empty_parameter_list;
non terminal ParseNode non_empty_static_array_pair_list;
non terminal ParseNode object_dim_list;
non terminal ParseNode object_property;
non terminal ParseNode optional_class_type;
non terminal ParseNode parameter_list;
non terminal ParseNode possible_comma;
non terminal ParseNode r_variable;
non terminal ParseNode reference_variable;
non terminal ParseNode rw_variable;
non terminal ParseNode scalar;
non terminal ParseNode simple_indirect_reference;
non terminal ParseNode statement;
non terminal ParseNode static_array_pair_list;
non terminal ParseNode static_class_constant;
non terminal ParseNode static_member;
non terminal ParseNode static_scalar;
non terminal ParseNode static_var_list;
non terminal ParseNode switch_case_list;
non terminal ParseNode top_statement;
non terminal ParseNode top_statement_list;
non terminal ParseNode unset_variable;
non terminal ParseNode unset_variables;
non terminal ParseNode unticked_class_declaration_statement;
non terminal ParseNode unticked_function_declaration_statement;
non terminal ParseNode unticked_statement;
non terminal ParseNode use_declaration;
non terminal ParseNode use_declarations;
non terminal ParseNode variable;
non terminal ParseNode variable_class_name;
non terminal ParseNode variable_modifiers;
non terminal ParseNode variable_name;
non terminal ParseNode variable_properties;
non terminal ParseNode variable_property;
non terminal ParseNode variable_without_objects;
non terminal ParseNode w_variable;
non terminal ParseNode while_statement;

precedence left T_INCLUDE, T_INCLUDE_ONCE, T_EVAL, T_REQUIRE, T_REQUIRE_ONCE;
precedence left T_COMMA;
precedence left T_LOGICAL_OR;
precedence left T_LOGICAL_XOR;
precedence left T_LOGICAL_AND;
precedence right T_PRINT;
precedence left T_ASSIGN, T_PLUS_EQUAL, T_MINUS_EQUAL, T_MUL_EQUAL, T_DIV_EQUAL, T_CONCAT_EQUAL, T_MOD_EQUAL, T_AND_EQUAL, T_OR_EQUAL, T_XOR_EQUAL, T_SL_EQUAL, T_SR_EQUAL;
precedence left T_QUESTION, T_COLON;
precedence left T_BOOLEAN_OR;
precedence left T_BOOLEAN_AND;
precedence left T_BITWISE_OR;
precedence left T_BITWISE_XOR;
precedence left T_BITWISE_AND;
precedence nonassoc T_IS_EQUAL, T_IS_NOT_EQUAL, T_IS_IDENTICAL, T_IS_NOT_IDENTICAL;
precedence nonassoc T_IS_SMALLER, T_IS_SMALLER_OR_EQUAL, T_IS_GREATER, T_IS_GREATER_OR_EQUAL;
precedence left T_SL, T_SR;
precedence left T_PLUS, T_MINUS, T_POINT;
precedence left T_MULT, T_DIV, T_MODULO;
precedence right T_NOT;
precedence nonassoc T_INSTANCEOF;
precedence right T_BITWISE_NOT, T_INC, T_DEC, T_INT_CAST, T_DOUBLE_CAST, T_STRING_CAST, T_ARRAY_CAST, T_OBJECT_CAST, T_BOOL_CAST, T_UNSET_CAST, T_AT;
precedence right T_OPEN_RECT_BRACES;
precedence nonassoc T_NEW, T_CLONE;
precedence left T_ELSEIF;
precedence left T_ELSE;
precedence left T_ENDIF;
precedence right T_STATIC, T_ABSTRACT, T_FINAL, T_PRIVATE, T_PROTECTED, T_PUBLIC;


S ::= 
      top_statement_list {: :}
;

top_statement_list ::= 
      top_statement_list   top_statement {:  :}
    | /* empty */ {:  :}
;

namespace_name ::= 
      T_STRING {:  :}
    | namespace_name T_NS_SEPARATOR T_STRING {:  :}
;

top_statement ::= 
      statement {:  :}
    | function_declaration_statement {:  :}
    | class_declaration_statement {:  :}
    | T_HALT_COMPILER T_OPEN_BRACES T_CLOSE_BRACES T_SEMICOLON {:  :}
    | T_NAMESPACE namespace_name T_SEMICOLON {:  :}
    | T_NAMESPACE namespace_name T_OPEN_CURLY_BRACES	
		top_statement_list T_CLOSE_CURLY_BRACES {:  :}
    | T_NAMESPACE T_OPEN_CURLY_BRACES					
		top_statement_list T_CLOSE_CURLY_BRACES {:  :}
    | T_USE use_declarations T_SEMICOLON {:  :}
    | constant_declaration T_SEMICOLON {:  :}
;

use_declarations ::= 
      use_declarations T_COMMA use_declaration {:  :}
    | use_declaration {:  :}
;

use_declaration ::= 
      namespace_name {:  :}
    | namespace_name T_AS T_STRING {:  :}
    | T_NS_SEPARATOR namespace_name {:  :}
    | T_NS_SEPARATOR namespace_name T_AS T_STRING {:  :}
;

constant_declaration ::= 
      constant_declaration T_COMMA T_STRING T_ASSIGN static_scalar {:  :}
    | T_CONST T_STRING T_ASSIGN static_scalar {:  :}
;

inner_statement_list ::= 
      inner_statement_list   inner_statement {:  :}
    | /* empty */ {:  :}
;

inner_statement ::= 
      statement {:  :}
    | function_declaration_statement {:  :}
    | class_declaration_statement {:  :}
    | T_HALT_COMPILER T_OPEN_BRACES T_CLOSE_BRACES T_SEMICOLON {:  :}
;

statement ::= 
      unticked_statement {:  :}
    | T_STRING T_COLON {:  :}
;

unticked_statement ::= 
      T_OPEN_CURLY_BRACES inner_statement_list T_CLOSE_CURLY_BRACES {:  :}
    | T_IF T_OPEN_BRACES expr T_CLOSE_BRACES  statement  elseif_list else_single {:  :}
    | T_IF T_OPEN_BRACES expr T_CLOSE_BRACES T_COLON  inner_statement_list  new_elseif_list new_else_single T_ENDIF T_SEMICOLON {:  :}
    | T_WHILE T_OPEN_BRACES  expr  T_CLOSE_BRACES  while_statement {:  :}
    | T_DO  statement T_WHILE T_OPEN_BRACES  expr T_CLOSE_BRACES T_SEMICOLON {:  :}
    | T_FOR
			T_OPEN_BRACES
				for_expr
			T_SEMICOLON 
				for_expr
			T_SEMICOLON 
				for_expr
			T_CLOSE_BRACES 
			for_statement {:  :}
    | T_SWITCH T_OPEN_BRACES expr T_CLOSE_BRACES	 switch_case_list {:  :}
    | T_BREAK T_SEMICOLON {:  :}
    | T_BREAK expr T_SEMICOLON {:  :}
    | T_CONTINUE T_SEMICOLON {:  :}
    | T_CONTINUE expr T_SEMICOLON {:  :}
    | T_RETURN T_SEMICOLON {:  :}
    | T_RETURN expr_without_variable T_SEMICOLON {:  :}
    | T_RETURN variable T_SEMICOLON {:  :}
    | T_GLOBAL global_var_list T_SEMICOLON {:  :}
    | T_STATIC static_var_list T_SEMICOLON {:  :}
    | T_ECHO echo_expr_list T_SEMICOLON {:  :}
    | T_INLINE_HTML {:  :}
    | expr T_SEMICOLON {:  :}
    | T_UNSET T_OPEN_BRACES unset_variables T_CLOSE_BRACES T_SEMICOLON {:  :}
    | T_FOREACH T_OPEN_BRACES variable T_AS
		
		foreach_variable foreach_optional_arg T_CLOSE_BRACES 
		foreach_statement {:  :}
    | T_FOREACH T_OPEN_BRACES expr_without_variable T_AS
		
		variable foreach_optional_arg T_CLOSE_BRACES 
		foreach_statement {:  :}
    | T_DECLARE  T_OPEN_BRACES declare_list T_CLOSE_BRACES declare_statement {:  :}
    | T_SEMICOLON		/* empty statement */ {:  :}
    | T_TRY  T_OPEN_CURLY_BRACES inner_statement_list T_CLOSE_CURLY_BRACES
		T_CATCH T_OPEN_BRACES 
		fully_qualified_class_name 
		T_VARIABLE T_CLOSE_BRACES 
		T_OPEN_CURLY_BRACES inner_statement_list T_CLOSE_CURLY_BRACES 
		additional_catches {:  :}
    | T_THROW expr T_SEMICOLON {:  :}
    | T_GOTO T_STRING T_SEMICOLON {:  :}
;

additional_catches ::= 
      non_empty_additional_catches {:  :}
    | /* empty */ {:  :}
;

non_empty_additional_catches ::= 
      additional_catch {:  :}
    | non_empty_additional_catches additional_catch {:  :}
;

additional_catch ::= 
      T_CATCH T_OPEN_BRACES fully_qualified_class_name  T_VARIABLE T_CLOSE_BRACES  T_OPEN_CURLY_BRACES inner_statement_list T_CLOSE_CURLY_BRACES {:  :}
;

unset_variables ::= 
      unset_variable {:  :}
    | unset_variables T_COMMA unset_variable {:  :}
;

unset_variable ::= 
      variable {:  :}
;

function_declaration_statement ::= 
      unticked_function_declaration_statement {:  :}
;

class_declaration_statement ::= 
      unticked_class_declaration_statement {:  :}
;

is_reference ::= 
      /* empty */ {:  :}
    | T_BITWISE_AND {:  :}
;

unticked_function_declaration_statement ::= 
      function is_reference T_STRING 
			T_OPEN_BRACES parameter_list T_CLOSE_BRACES T_OPEN_CURLY_BRACES inner_statement_list T_CLOSE_CURLY_BRACES {:  :}
;

unticked_class_declaration_statement ::= 
      class_entry_type T_STRING extends_from
			
			implements_list
			T_OPEN_CURLY_BRACES
				class_statement_list
			T_CLOSE_CURLY_BRACES {:  :}
    | interface_entry T_STRING
			
			interface_extends_list
			T_OPEN_CURLY_BRACES
				class_statement_list
			T_CLOSE_CURLY_BRACES {:  :}
;

class_entry_type ::= 
      T_CLASS {:  :}
    | T_ABSTRACT T_CLASS {:  :}
    | T_FINAL T_CLASS {:  :}
;

extends_from ::= 
      /* empty */ {:  :}
    | T_EXTENDS fully_qualified_class_name {:  :}
;

interface_entry ::= 
      T_INTERFACE {:  :}
;

interface_extends_list ::= 
      /* empty */ {:  :}
    | T_EXTENDS interface_list {:  :}
;

implements_list ::= 
      /* empty */ {:  :}
    | T_IMPLEMENTS interface_list {:  :}
;

interface_list ::= 
      fully_qualified_class_name {:  :}
    | interface_list T_COMMA fully_qualified_class_name {:  :}
;

foreach_optional_arg ::= 
      /* empty */ {:  :}
    | T_DOUBLE_ARROW foreach_variable {:  :}
;

foreach_variable ::= 
      variable {:  :}
    | T_BITWISE_AND variable {:  :}
;

for_statement ::= 
      statement {:  :}
    | T_COLON inner_statement_list T_ENDFOR T_SEMICOLON {:  :}
;

foreach_statement ::= 
      statement {:  :}
    | T_COLON inner_statement_list T_ENDFOREACH T_SEMICOLON {:  :}
;

declare_statement ::= 
      statement {:  :}
    | T_COLON inner_statement_list T_ENDDECLARE T_SEMICOLON {:  :}
;

declare_list ::= 
      T_STRING T_ASSIGN static_scalar {:  :}
    | declare_list T_COMMA T_STRING T_ASSIGN static_scalar {:  :}
;

switch_case_list ::= 
      T_OPEN_CURLY_BRACES case_list T_CLOSE_CURLY_BRACES {:  :}
    | T_OPEN_CURLY_BRACES T_SEMICOLON case_list T_CLOSE_CURLY_BRACES {:  :}
    | T_COLON case_list T_ENDSWITCH T_SEMICOLON {:  :}
    | T_COLON T_SEMICOLON case_list T_ENDSWITCH T_SEMICOLON {:  :}
;

case_list ::= 
      /* empty */ {:  :}
    | case_list T_CASE expr case_separator  inner_statement_list {:  :}
    | case_list T_DEFAULT case_separator  inner_statement_list {:  :}
;

case_separator ::= 
      T_COLON {:  :}
    | T_SEMICOLON {:  :}
;

while_statement ::= 
      statement {:  :}
    | T_COLON inner_statement_list T_ENDWHILE T_SEMICOLON {:  :}
;

elseif_list ::= 
      /* empty */ {:  :}
    | elseif_list T_ELSEIF T_OPEN_BRACES expr T_CLOSE_BRACES  statement {:  :}
;

new_elseif_list ::= 
      /* empty */ {:  :}
    | new_elseif_list T_ELSEIF T_OPEN_BRACES expr T_CLOSE_BRACES T_COLON  inner_statement_list {:  :}
;

else_single ::= 
      /* empty */ {:  :}
    | T_ELSE statement {:  :}
;

new_else_single ::= 
      /* empty */ {:  :}
    | T_ELSE T_COLON inner_statement_list {:  :}
;

parameter_list ::= 
      non_empty_parameter_list {:  :}
    | /* empty */ {:  :}
;

non_empty_parameter_list ::= 
      optional_class_type T_VARIABLE {:  :}
    | optional_class_type T_BITWISE_AND T_VARIABLE {:  :}
    | optional_class_type T_BITWISE_AND T_VARIABLE T_ASSIGN static_scalar {:  :}
    | optional_class_type T_VARIABLE T_ASSIGN static_scalar {:  :}
    | non_empty_parameter_list T_COMMA optional_class_type T_VARIABLE {:  :}
    | non_empty_parameter_list T_COMMA optional_class_type T_BITWISE_AND T_VARIABLE {:  :}
    | non_empty_parameter_list T_COMMA optional_class_type T_BITWISE_AND T_VARIABLE	 T_ASSIGN static_scalar {:  :}
    | non_empty_parameter_list T_COMMA optional_class_type T_VARIABLE T_ASSIGN static_scalar {:  :}
;

optional_class_type ::= 
      /* empty */ {:  :}
    | fully_qualified_class_name {:  :}
    | T_ARRAY {:  :}
;

function_call_parameter_list ::= 
      non_empty_function_call_parameter_list {:  :}
    | /* empty */ {:  :}
;

non_empty_function_call_parameter_list ::= 
      expr_without_variable {:  :}
    | variable {:  :}
    | T_BITWISE_AND w_variable {:  :}
    | non_empty_function_call_parameter_list T_COMMA expr_without_variable {:  :}
    | non_empty_function_call_parameter_list T_COMMA variable {:  :}
    | non_empty_function_call_parameter_list T_COMMA T_BITWISE_AND w_variable {:  :}
;

global_var_list ::= 
      global_var_list T_COMMA global_var {:  :}
    | global_var {:  :}
;

global_var ::= 
      T_VARIABLE {:  :}
    | T_DOLLAR r_variable {:  :}
    | T_DOLLAR T_OPEN_CURLY_BRACES expr T_CLOSE_CURLY_BRACES {:  :}
;

static_var_list ::= 
      static_var_list T_COMMA T_VARIABLE {:  :}
    | static_var_list T_COMMA T_VARIABLE T_ASSIGN static_scalar {:  :}
    | T_VARIABLE {:  :}
    | T_VARIABLE T_ASSIGN static_scalar {:  :}
;

class_statement_list ::= 
      class_statement_list class_statement {:  :}
    | /* empty */ {:  :}
;

class_statement ::= 
      variable_modifiers  class_variable_declaration T_SEMICOLON {:  :}
    | class_constant_declaration T_SEMICOLON {:  :}
    | method_modifiers function is_reference T_STRING  T_OPEN_BRACES
			parameter_list T_CLOSE_BRACES method_body {:  :}
;

method_body ::= 
      T_SEMICOLON /* abstract method */ {:  :}
    | T_OPEN_CURLY_BRACES inner_statement_list T_CLOSE_CURLY_BRACES {:  :}
;

variable_modifiers ::= 
      non_empty_member_modifiers {:  :}
    | T_VAR {:  :}
;

method_modifiers ::= 
      /* empty */ {:  :}
    | non_empty_member_modifiers {:  :}
;

non_empty_member_modifiers ::= 
      member_modifier {:  :}
    | non_empty_member_modifiers member_modifier {:  :}
;

member_modifier ::= 
      T_PUBLIC {:  :}
    | T_PROTECTED {:  :}
    | T_PRIVATE {:  :}
    | T_STATIC {:  :}
    | T_ABSTRACT {:  :}
    | T_FINAL {:  :}
;

class_variable_declaration ::= 
      class_variable_declaration T_COMMA T_VARIABLE {:  :}
    | class_variable_declaration T_COMMA T_VARIABLE T_ASSIGN static_scalar {:  :}
    | T_VARIABLE {:  :}
    | T_VARIABLE T_ASSIGN static_scalar {:  :}
;

class_constant_declaration ::= 
      class_constant_declaration T_COMMA T_STRING T_ASSIGN static_scalar {:  :}
    | T_CONST T_STRING T_ASSIGN static_scalar {:  :}
;

echo_expr_list ::= 
      echo_expr_list T_COMMA expr {:  :}
    | expr {:  :}
;

for_expr ::= 
      /* empty */ {:  :}
    | non_empty_for_expr {:  :}
;

non_empty_for_expr ::= 
      non_empty_for_expr T_COMMA	 expr {:  :}
    | expr {:  :}
;

expr_without_variable ::= 
      T_LIST T_OPEN_BRACES  assignment_list T_CLOSE_BRACES T_ASSIGN expr {:  :}
    | variable T_ASSIGN expr {:  :}
    | variable T_ASSIGN T_BITWISE_AND variable {:  :}
    | variable T_ASSIGN T_BITWISE_AND T_NEW class_name_reference  ctor_arguments {:  :}
    | T_NEW class_name_reference  ctor_arguments {:  :}
    | T_CLONE expr {:  :}
    | variable T_PLUS_EQUAL expr {:  :}
    | variable T_MINUS_EQUAL expr {:  :}
    | variable T_MUL_EQUAL expr {:  :}
    | variable T_DIV_EQUAL expr {:  :}
    | variable T_CONCAT_EQUAL expr {:  :}
    | variable T_MOD_EQUAL expr {:  :}
    | variable T_AND_EQUAL expr {:  :}
    | variable T_OR_EQUAL expr {:  :}
    | variable T_XOR_EQUAL expr {:  :}
    | variable T_SL_EQUAL expr {:  :}
    | variable T_SR_EQUAL expr {:  :}
    | rw_variable T_INC {:  :}
    | T_INC rw_variable {:  :}
    | rw_variable T_DEC {:  :}
    | T_DEC rw_variable {:  :}
    | expr T_BOOLEAN_OR  expr {:  :}
    | expr T_BOOLEAN_AND  expr {:  :}
    | expr T_LOGICAL_OR  expr {:  :}
    | expr T_LOGICAL_AND  expr {:  :}
    | expr T_LOGICAL_XOR expr {:  :}
    | expr T_BITWISE_OR expr {:  :}
    | expr T_BITWISE_AND expr {:  :}
    | expr T_BITWISE_XOR expr {:  :}
    | expr T_POINT expr {:  :}
    | expr T_PLUS expr {:  :}
    | expr T_MINUS expr {:  :}
    | expr T_MULT expr {:  :}
    | expr T_DIV expr {:  :}
    | expr T_MODULO expr {:  :}
    | expr T_SL expr {:  :}
    | expr T_SR expr {:  :}
    | T_NOT expr {:  :}
    | T_BITWISE_NOT expr {:  :}
    | expr T_IS_IDENTICAL expr {:  :}
    | expr T_IS_NOT_IDENTICAL expr {:  :}
    | expr T_IS_EQUAL expr {:  :}
    | expr T_IS_NOT_EQUAL expr {:  :}
    | expr T_IS_SMALLER expr {:  :}
    | expr T_IS_SMALLER_OR_EQUAL expr {:  :}
    | expr T_IS_GREATER expr {:  :}
    | expr T_IS_GREATER_OR_EQUAL expr {:  :}
    | expr T_INSTANCEOF class_name_reference {:  :}
    | T_OPEN_BRACES expr T_CLOSE_BRACES {:  :}
    | expr T_QUESTION 
		expr T_COLON 
		expr {:  :}
    | expr T_QUESTION T_COLON 
		expr {:  :}
    | internal_functions_in_yacc {:  :}
    | T_INT_CAST expr {:  :}
    | T_DOUBLE_CAST expr {:  :}
    | T_STRING_CAST expr {:  :}
    | T_ARRAY_CAST expr {:  :}
    | T_OBJECT_CAST expr {:  :}
    | T_BOOL_CAST expr {:  :}
    | T_UNSET_CAST expr {:  :}
    | T_EXIT exit_expr {:  :}
    | T_AT  expr {:  :}
    | scalar {:  :}
    | T_ARRAY T_OPEN_BRACES array_pair_list T_CLOSE_BRACES {:  :}
    | T_BACKTICK backticks_expr T_BACKTICK {:  :}
    | T_PRINT expr {:  :}
    | function is_reference T_OPEN_BRACES 
			parameter_list T_CLOSE_BRACES lexical_vars T_OPEN_CURLY_BRACES inner_statement_list T_CLOSE_CURLY_BRACES {:  :}
;

function ::= 
      T_FUNCTION {:  :}
;

lexical_vars ::= 
      /* empty */ {:  :}
    | T_USE T_OPEN_BRACES lexical_var_list T_CLOSE_BRACES {:  :}
;

lexical_var_list ::= 
      lexical_var_list T_COMMA T_VARIABLE {:  :}
    | lexical_var_list T_COMMA T_BITWISE_AND T_VARIABLE {:  :}
    | T_VARIABLE {:  :}
    | T_BITWISE_AND T_VARIABLE {:  :}
;

function_call ::= 
      namespace_name T_OPEN_BRACES 
				function_call_parameter_list
				T_CLOSE_BRACES {:  :}
    | T_NAMESPACE T_NS_SEPARATOR namespace_name T_OPEN_BRACES 
				function_call_parameter_list
				T_CLOSE_BRACES {:  :}
    | T_NS_SEPARATOR namespace_name T_OPEN_BRACES 
				function_call_parameter_list
				T_CLOSE_BRACES {:  :}
    | class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING T_OPEN_BRACES 
			function_call_parameter_list
			T_CLOSE_BRACES {:  :}
    | class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects T_OPEN_BRACES 
			function_call_parameter_list
			T_CLOSE_BRACES {:  :}
    | variable_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING T_OPEN_BRACES 
			function_call_parameter_list
			T_CLOSE_BRACES {:  :}
    | variable_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects T_OPEN_BRACES 
			function_call_parameter_list
			T_CLOSE_BRACES {:  :}
    | variable_without_objects  T_OPEN_BRACES 
			function_call_parameter_list T_CLOSE_BRACES {:  :}
;

class_name ::= 
      T_STATIC {:  :}
    | namespace_name {:  :}
    | T_NAMESPACE T_NS_SEPARATOR namespace_name {:  :}
    | T_NS_SEPARATOR namespace_name {:  :}
;

fully_qualified_class_name ::= 
      namespace_name {:  :}
    | T_NAMESPACE T_NS_SEPARATOR namespace_name {:  :}
    | T_NS_SEPARATOR namespace_name {:  :}
;

class_name_reference ::= 
      class_name {:  :}
    | dynamic_class_name_reference {:  :}
;

dynamic_class_name_reference ::= 
      base_variable T_OBJECT_OPERATOR 
			object_property  dynamic_class_name_variable_properties {:  :}
    | base_variable {:  :}
;

dynamic_class_name_variable_properties ::= 
      dynamic_class_name_variable_properties dynamic_class_name_variable_property {:  :}
    | /* empty */ {:  :}
;

dynamic_class_name_variable_property ::= 
      T_OBJECT_OPERATOR object_property {:  :}
;

exit_expr ::= 
      /* empty */ {:  :}
    | T_OPEN_BRACES T_CLOSE_BRACES {:  :}
    | T_OPEN_BRACES expr T_CLOSE_BRACES {:  :}
;

backticks_expr ::= 
      /* empty */ {:  :}
    | T_ENCAPSED_AND_WHITESPACE {:  :}
    | encaps_list {:  :}
;

ctor_arguments ::= 
      /* empty */ {:  :}
    | T_OPEN_BRACES function_call_parameter_list T_CLOSE_BRACES {:  :}
;

common_scalar ::= 
      T_LNUMBER {:  :}
    | T_DNUMBER {:  :}
    | T_CONSTANT_ENCAPSED_STRING {:  :}
    | T_LINE {:  :}
    | T_FILE {:  :}
    | T_DIR {:  :}
    | T_CLASS_C {:  :}
    | T_METHOD_C {:  :}
    | T_FUNC_C {:  :}
    | T_NS_C {:  :}
    | T_START_HEREDOC T_ENCAPSED_AND_WHITESPACE T_END_HEREDOC {:  :}
    | T_START_HEREDOC T_END_HEREDOC {:  :}
;

static_scalar ::= 
      common_scalar {:  :}
    | namespace_name {:  :}
    | T_NAMESPACE T_NS_SEPARATOR namespace_name {:  :}
    | T_NS_SEPARATOR namespace_name {:  :}
    | T_PLUS static_scalar {:  :}
    | T_MINUS static_scalar {:  :}
    | T_ARRAY T_OPEN_BRACES static_array_pair_list T_CLOSE_BRACES {:  :}
    | static_class_constant {:  :}
;

static_class_constant ::= 
      class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING {:  :}
;

scalar ::= 
      T_STRING_VARNAME {:  :}
    | class_constant {:  :}
    | namespace_name {:  :}
    | T_NAMESPACE T_NS_SEPARATOR namespace_name {:  :}
    | T_NS_SEPARATOR namespace_name {:  :}
    | common_scalar {:  :}
    | T_DOUBLE_QUOTE encaps_list T_DOUBLE_QUOTE {:  :}
    | T_START_HEREDOC encaps_list T_END_HEREDOC {:  :}
;

static_array_pair_list ::= 
      /* empty */ {:  :}
    | non_empty_static_array_pair_list possible_comma {:  :}
;

possible_comma ::= 
      /* empty */ {:  :}
    | T_COMMA {:  :}
;

non_empty_static_array_pair_list ::= 
      non_empty_static_array_pair_list T_COMMA static_scalar T_DOUBLE_ARROW static_scalar {:  :}
    | non_empty_static_array_pair_list T_COMMA static_scalar {:  :}
    | static_scalar T_DOUBLE_ARROW static_scalar {:  :}
    | static_scalar {:  :}
;

expr ::= 
      r_variable {:  :}
    | expr_without_variable {:  :}
;

r_variable ::= 
      variable {:  :}
;

w_variable ::= 
      variable {:  :}
;

rw_variable ::= 
      variable {:  :}
;

variable ::= 
      base_variable_with_function_calls T_OBJECT_OPERATOR 
			object_property  method_or_not variable_properties {:  :}
    | base_variable_with_function_calls {:  :}
;

variable_properties ::= 
      variable_properties variable_property {:  :}
    | /* empty */ {:  :}
;

variable_property ::= 
      T_OBJECT_OPERATOR object_property  method_or_not {:  :}
;

method_or_not ::= 
      T_OPEN_BRACES 
				function_call_parameter_list T_CLOSE_BRACES {:  :}
    | /* empty */ {:  :}
;

variable_without_objects ::= 
      reference_variable {:  :}
    | simple_indirect_reference reference_variable {:  :}
;

static_member ::= 
      class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects {:  :}
    | variable_class_name T_PAAMAYIM_NEKUDOTAYIM variable_without_objects {:  :}
;

variable_class_name ::= 
      reference_variable {:  :}
;

base_variable_with_function_calls ::= 
      base_variable {:  :}
    | function_call {:  :}
;

base_variable ::= 
      reference_variable {:  :}
    | simple_indirect_reference reference_variable {:  :}
    | static_member {:  :}
;

reference_variable ::= 
      reference_variable T_OPEN_RECT_BRACES dim_offset T_CLOSE_RECT_BRACES {:  :}
    | reference_variable T_OPEN_CURLY_BRACES expr T_CLOSE_CURLY_BRACES {:  :}
    | compound_variable {:  :}
;

compound_variable ::= 
      T_VARIABLE {:  :}
    | T_DOLLAR T_OPEN_CURLY_BRACES expr T_CLOSE_CURLY_BRACES {:  :}
;

dim_offset ::= 
      /* empty */ {:  :}
    | expr {:  :}
;

object_property ::= 
      object_dim_list {:  :}
    | variable_without_objects {:  :}
;

object_dim_list ::= 
      object_dim_list T_OPEN_RECT_BRACES dim_offset T_CLOSE_RECT_BRACES {:  :}
    | object_dim_list T_OPEN_CURLY_BRACES expr T_CLOSE_CURLY_BRACES {:  :}
    | variable_name {:  :}
;

variable_name ::= 
      T_STRING {:  :}
    | T_OPEN_CURLY_BRACES expr T_CLOSE_CURLY_BRACES {:  :}
;

simple_indirect_reference ::= 
      T_DOLLAR {:  :}
    | simple_indirect_reference T_DOLLAR {:  :}
;

assignment_list ::= 
      assignment_list T_COMMA assignment_list_element {:  :}
    | assignment_list_element {:  :}
;

assignment_list_element ::= 
      variable {:  :}
    | T_LIST T_OPEN_BRACES  assignment_list T_CLOSE_BRACES {:  :}
    | /* empty */ {:  :}
;

array_pair_list ::= 
      /* empty */ {:  :}
    | non_empty_array_pair_list possible_comma {:  :}
;

non_empty_array_pair_list ::= 
      non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW expr {:  :}
    | non_empty_array_pair_list T_COMMA expr {:  :}
    | expr T_DOUBLE_ARROW expr {:  :}
    | expr {:  :}
    | non_empty_array_pair_list T_COMMA expr T_DOUBLE_ARROW T_BITWISE_AND w_variable {:  :}
    | non_empty_array_pair_list T_COMMA T_BITWISE_AND w_variable {:  :}
    | expr T_DOUBLE_ARROW T_BITWISE_AND w_variable {:  :}
    | T_BITWISE_AND w_variable {:  :}
;

encaps_list ::= 
      encaps_list encaps_var {:  :}
    | encaps_list T_ENCAPSED_AND_WHITESPACE {:  :}
    | encaps_var {:  :}
    | T_ENCAPSED_AND_WHITESPACE encaps_var {:  :}
;

encaps_var ::= 
      T_VARIABLE {:  :}
    | T_VARIABLE T_OPEN_RECT_BRACES  encaps_var_offset T_CLOSE_RECT_BRACES {:  :}
    | T_VARIABLE T_OBJECT_OPERATOR T_STRING {:  :}
    | T_DOLLAR_OPEN_CURLY_BRACES expr T_CLOSE_CURLY_BRACES {:  :}
    | T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME T_OPEN_RECT_BRACES expr T_CLOSE_RECT_BRACES T_CLOSE_CURLY_BRACES {:  :}
    | T_CURLY_OPEN variable T_CLOSE_CURLY_BRACES {:  :}
;

encaps_var_offset ::= 
      T_STRING {:  :}
    | T_NUM_STRING {:  :}
    | T_VARIABLE {:  :}
;

internal_functions_in_yacc ::= 
      T_ISSET T_OPEN_BRACES isset_variables T_CLOSE_BRACES {:  :}
    | T_EMPTY T_OPEN_BRACES variable T_CLOSE_BRACES {:  :}
    | T_INCLUDE expr {:  :}
    | T_INCLUDE_ONCE expr {:  :}
    | T_EVAL T_OPEN_BRACES expr T_CLOSE_BRACES {:  :}
    | T_REQUIRE expr {:  :}
    | T_REQUIRE_ONCE expr {:  :}
;

isset_variables ::= 
      variable {:  :}
    | isset_variables T_COMMA  variable {:  :}
;

class_constant ::= 
      class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING {:  :}
    | variable_class_name T_PAAMAYIM_NEKUDOTAYIM T_STRING {:  :}
;
